From 48c5254670250ef5d60bfbcdc2033a9ce91d5eb8 Mon Sep 17 00:00:00 2001
From: Amelia Grace <agrace@bastiansolutions.com>
Date: Tue, 28 Jan 2025 09:23:42 -0700
Subject: [PATCH] fix build with GL

Signed-off-by: Amelia Grace <agrace@bastiansolutions.com>
---
 CMake/Dependencies.cmake                      | 204 +++++----------
 CMake/FeatureSummary.cmake                    | 247 ------------------
 CMakeLists.txt                                |   2 +-
 Components/Bites/CMakeLists.txt               |  21 +-
 OgreMain/include/OgreLodStrategy.h            |   0
 .../GL/include/OgreGLCopyingRenderTexture.h   |   0
 .../GL/include/OgreGLFBOMultiRenderTarget.h   |   0
 .../GL/include/OgreGLFrameBufferObject.h      |   0
 .../GL/include/OgreGLPBRenderTexture.h        |   0
 .../GL/src/OgreGLCopyingRenderTexture.cpp     |   0
 .../GL/src/OgreGLFBOMultiRenderTarget.cpp     |   0
 .../GL/src/OgreGLFrameBufferObject.cpp        |   0
 .../GL/src/OgreGLPBRenderTexture.cpp          |   0
 RenderSystems/GLES2/CMakeLists.txt            |   8 +-
 .../include/EGL/X11/OgreX11EGLSupport.h       |   2 +
 .../GLSupport/include/OgreGLPBuffer.h         |   0
 .../GLSupport/src/EGL/OgreEGLSupport.cpp      |   0
 17 files changed, 88 insertions(+), 396 deletions(-)
 delete mode 100644 CMake/FeatureSummary.cmake
 mode change 100755 => 100644 OgreMain/include/OgreLodStrategy.h
 mode change 100755 => 100644 RenderSystems/GL/include/OgreGLCopyingRenderTexture.h
 mode change 100755 => 100644 RenderSystems/GL/include/OgreGLFBOMultiRenderTarget.h
 mode change 100755 => 100644 RenderSystems/GL/include/OgreGLFrameBufferObject.h
 mode change 100755 => 100644 RenderSystems/GL/include/OgreGLPBRenderTexture.h
 mode change 100755 => 100644 RenderSystems/GL/src/OgreGLCopyingRenderTexture.cpp
 mode change 100755 => 100644 RenderSystems/GL/src/OgreGLFBOMultiRenderTarget.cpp
 mode change 100755 => 100644 RenderSystems/GL/src/OgreGLFrameBufferObject.cpp
 mode change 100755 => 100644 RenderSystems/GL/src/OgreGLPBRenderTexture.cpp
 mode change 100755 => 100644 RenderSystems/GLSupport/include/OgreGLPBuffer.h
 mode change 100755 => 100644 RenderSystems/GLSupport/src/EGL/OgreEGLSupport.cpp

diff --git a/CMake/Dependencies.cmake b/CMake/Dependencies.cmake
index 38321ebec..e3f382585 100644
--- a/CMake/Dependencies.cmake
+++ b/CMake/Dependencies.cmake
@@ -13,52 +13,13 @@
 
 # OGRE_DEPENDENCIES_DIR can be used to specify a single base
 # folder where the required dependencies may be found.
-set(OGRE_DEPENDENCIES_DIR "" CACHE PATH "Path to prebuilt OGRE dependencies")
-option(OGRE_BUILD_DEPENDENCIES "automatically build Ogre Dependencies (freetype, zzip)" TRUE)
-
-include(FindPkgMacros)
-getenv_path(OGRE_DEPENDENCIES_DIR)
-if(OGRE_BUILD_PLATFORM_EMSCRIPTEN)
-  set(OGRE_DEP_SEARCH_PATH
-    ${OGRE_DEPENDENCIES_DIR}
-    ${EMSCRIPTEN_ROOT_PATH}/system
-    ${ENV_OGRE_DEPENDENCIES_DIR}
-    "${PROJECT_BINARY_DIR}/EmscriptenDependencies"
-    "${PROJECT_SOURCE_DIR}/EmscriptenDependencies"
-    "${PROJECT_BINARY_DIR}/../EmscriptenDependencies"
-    "${PROJECT_SOURCE_DIR}/../EmscriptenDependencies"
-  )
-elseif(APPLE_IOS)
-  set(OGRE_DEP_SEARCH_PATH 
-    ${OGRE_DEPENDENCIES_DIR}
-    ${ENV_OGRE_DEPENDENCIES_DIR}
-    "${PROJECT_BINARY_DIR}/iOSDependencies"
-    "${PROJECT_SOURCE_DIR}/iOSDependencies"
-    "${PROJECT_BINARY_DIR}/../iOSDependencies"
-    "${PROJECT_SOURCE_DIR}/../iOSDependencies"
-  )
-elseif(OGRE_BUILD_PLATFORM_ANDROID)
-  set(OGRE_DEP_SEARCH_PATH 
-    ${OGRE_DEPENDENCIES_DIR}
-    ${ENV_OGRE_DEPENDENCIES_DIR}
-    "${PROJECT_BINARY_DIR}/AndroidDependencies"
-    "${PROJECT_SOURCE_DIR}/AndroidDependencies"
-    "${PROJECT_BINARY_DIR}/../AndroidDependencies"
-    "${PROJECT_SOURCE_DIR}/../AndroidDependencies"
-  )
-else()
-  set(OGRE_DEP_SEARCH_PATH 
-    ${OGRE_DEPENDENCIES_DIR}
-    ${ENV_OGRE_DEPENDENCIES_DIR}
-    "${PROJECT_BINARY_DIR}/Dependencies"
-    "${PROJECT_SOURCE_DIR}/Dependencies"
-    "${PROJECT_BINARY_DIR}/../Dependencies"
-    "${PROJECT_SOURCE_DIR}/../Dependencies"
-  )
-endif()
+set(OGRE_DEPENDENCIES_DIR "${PROJECT_BINARY_DIR}/Dependencies" CACHE PATH "Path to prebuilt OGRE dependencies")
+option(OGRE_BUILD_DEPENDENCIES "automatically build Ogre Dependencies (SDL2, pugixml)" TRUE)
 
-message(STATUS "Search path: ${OGRE_DEP_SEARCH_PATH}")
-list(GET OGRE_DEP_SEARCH_PATH 0 OGREDEPS_PATH)
+message(STATUS "DEPENDENCIES_DIR: ${OGRE_DEPENDENCIES_DIR}")
+
+set(OGREDEPS_PATH "${OGRE_DEPENDENCIES_DIR}")
+set(OGRE_DEP_SEARCH_PATH "${OGRE_DEPENDENCIES_DIR}")
 
 if(CMAKE_CROSSCOMPILING)
     set(CMAKE_FIND_ROOT_PATH ${OGREDEPS_PATH} "${CMAKE_FIND_ROOT_PATH}")
@@ -108,38 +69,6 @@ set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${OGRE_DEP_SEARCH_PATH})
 set(CMAKE_FRAMEWORK_PATH ${CMAKE_FRAMEWORK_PATH} ${OGRE_DEP_SEARCH_PATH})
 
 if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
-    if(MSVC OR EMSCRIPTEN OR MINGW) # other platforms ship zlib
-        message(STATUS "Building zlib")
-        file(DOWNLOAD 
-            http://zlib.net/zlib-1.2.11.tar.gz
-            ${PROJECT_BINARY_DIR}/zlib-1.2.11.tar.gz 
-            EXPECTED_MD5 1c9f62f0778697a09d36121ead88e08e)
-        execute_process(COMMAND ${CMAKE_COMMAND} 
-            -E tar xf zlib-1.2.11.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
-        execute_process(COMMAND ${BUILD_COMMAND_COMMON}
-            -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
-            ${PROJECT_BINARY_DIR}/zlib-1.2.11
-            WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/zlib-1.2.11)
-        execute_process(COMMAND ${CMAKE_COMMAND} 
-            --build ${PROJECT_BINARY_DIR}/zlib-1.2.11 ${BUILD_COMMAND_OPTS})
-    endif()
-
-    message(STATUS "Building ZZIPlib")
-    file(DOWNLOAD
-        https://github.com/gdraheim/zziplib/archive/v0.13.71.tar.gz
-        ${PROJECT_BINARY_DIR}/zziplib-0.13.71.tar.gz)
-    execute_process(COMMAND ${CMAKE_COMMAND}
-        -E tar xf zziplib-0.13.71.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
-    execute_process(COMMAND ${BUILD_COMMAND_COMMON}
-        -DZLIB_ROOT=${OGREDEPS_PATH}
-        -DZZIPMMAPPED=OFF -DZZIPCOMPAT=OFF -DZZIPLIBTOOL=OFF -DZZIPFSEEKO=OFF -DZZIPWRAP=OFF -DZZIPSDL=OFF -DZZIPBINS=OFF -DZZIPTEST=OFF -DZZIPDOCS=OFF -DBASH=sh
-        -DBUILD_STATIC_LIBS=TRUE
-        -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
-        ${PROJECT_BINARY_DIR}/zziplib-0.13.71
-        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/zziplib-0.13.71)
-    execute_process(COMMAND ${CMAKE_COMMAND} 
-        --build ${PROJECT_BINARY_DIR}/zziplib-0.13.71 ${BUILD_COMMAND_OPTS})
-
     message(STATUS "Building pugixml")
     file(DOWNLOAD
         https://github.com/zeux/pugixml/releases/download/v1.10/pugixml-1.10.tar.gz
@@ -182,27 +111,41 @@ if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
     if(MSVC OR MINGW OR SKBUILD) # other platforms dont need this
         message(STATUS "Building SDL2")
         file(DOWNLOAD
-            https://libsdl.org/release/SDL2-2.0.14.tar.gz
-            ${PROJECT_BINARY_DIR}/SDL2-2.0.14.tar.gz)
+            https://libsdl.org/release/SDL2-2.0.20.tar.gz
+            ${PROJECT_BINARY_DIR}/SDL2-2.0.20.tar.gz)
         execute_process(COMMAND ${CMAKE_COMMAND} 
-            -E tar xf SDL2-2.0.14.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
+            -E tar xf SDL2-2.0.20.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
         execute_process(COMMAND ${CMAKE_COMMAND}
             -E make_directory ${PROJECT_BINARY_DIR}/SDL2-build)
         execute_process(COMMAND ${BUILD_COMMAND_COMMON}
             -DSDL_STATIC=FALSE
-            ${PROJECT_BINARY_DIR}/SDL2-2.0.14
+            ${PROJECT_BINARY_DIR}/SDL2-2.0.20
             WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/SDL2-build)
         execute_process(COMMAND ${CMAKE_COMMAND}
             --build ${PROJECT_BINARY_DIR}/SDL2-build ${BUILD_COMMAND_OPTS})
     endif()
 
     if(MSVC OR MINGW OR SKBUILD) # other platforms dont need this
+      message(STATUS "Building zlib") # only needed for Assimp
+      file(DOWNLOAD
+          http://zlib.net/zlib-1.2.11.tar.gz
+          ${PROJECT_BINARY_DIR}/zlib-1.2.11.tar.gz
+          EXPECTED_MD5 1c9f62f0778697a09d36121ead88e08e)
+      execute_process(COMMAND ${CMAKE_COMMAND}
+          -E tar xf zlib-1.2.11.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
+      execute_process(COMMAND ${BUILD_COMMAND_COMMON}
+          -DBUILD_SHARED_LIBS=${OGREDEPS_SHARED}
+          ${PROJECT_BINARY_DIR}/zlib-1.2.11
+          WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/zlib-1.2.11)
+      execute_process(COMMAND ${CMAKE_COMMAND}
+          --build ${PROJECT_BINARY_DIR}/zlib-1.2.11 ${BUILD_COMMAND_OPTS})
+
       message(STATUS "Building Assimp")
       file(DOWNLOAD
-          https://github.com/assimp/assimp/archive/v5.0.1.tar.gz
-          ${PROJECT_BINARY_DIR}/v5.0.1.tar.gz)
+          https://github.com/assimp/assimp/archive/v5.1.6.tar.gz
+          ${PROJECT_BINARY_DIR}/v5.1.6.tar.gz)
       execute_process(COMMAND ${CMAKE_COMMAND}
-          -E tar xf v5.0.1.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
+          -E tar xf v5.1.6.tar.gz WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
       execute_process(COMMAND ${BUILD_COMMAND_COMMON}
           -DZLIB_ROOT=${OGREDEPS_PATH}
           -DBUILD_SHARED_LIBS=OFF
@@ -210,13 +153,13 @@ if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
           -DASSIMP_NO_EXPORT=TRUE
           -DASSIMP_BUILD_OGRE_IMPORTER=OFF
           -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
-          ${PROJECT_BINARY_DIR}/assimp-5.0.1
-          WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/assimp-5.0.1)
+          ${PROJECT_BINARY_DIR}/assimp-5.1.6
+          WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/assimp-5.1.6)
       execute_process(COMMAND ${CMAKE_COMMAND}
-        --build ${PROJECT_BINARY_DIR}/assimp-5.0.1 ${BUILD_COMMAND_OPTS})
+        --build ${PROJECT_BINARY_DIR}/assimp-5.1.6 ${BUILD_COMMAND_OPTS})
       # RelWithDebInfo has Release ABI
       if(NOT OGRE_DEBUG_MODE)
-        file(REMOVE ${OGREDEPS_PATH}/lib/cmake/assimp-5.0/assimpTargets-debug.cmake)
+        file(REMOVE ${OGREDEPS_PATH}/lib/cmake/assimp-5.1/assimpTargets-debug.cmake)
       endif()
     endif()
 endif()
@@ -225,28 +168,18 @@ endif()
 # Core dependencies
 #######################################################################
 
-# Find zlib
-find_package(ZLIB)
-macro_log_feature(ZLIB_FOUND "zlib" "Simple data compression library" "http://www.zlib.net" FALSE "" "")
-
-if (ZLIB_FOUND)
-  # Find zziplib
-  find_package(ZZip)
-  macro_log_feature(ZZip_FOUND "zziplib" "Extract data from zip archives" "http://zziplib.sourceforge.net" FALSE "" "")
-endif ()
-
 # Find FreeImage
 find_package(FreeImage)
-macro_log_feature(FreeImage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net" FALSE "" "")
+macro_log_feature(FreeImage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net")
 
 # Find FreeType
 find_package(Freetype)
-macro_log_feature(FREETYPE_FOUND "freetype" "Portable font engine" "http://www.freetype.org" FALSE "" "")
+macro_log_feature(FREETYPE_FOUND "freetype" "Portable font engine" "http://www.freetype.org")
 
 # Find X11
 if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)
-  find_package(X11)
-  macro_log_feature(X11_FOUND "X11" "X Window system" "http://www.x.org" TRUE "" "")
+  find_package(X11 REQUIRED)
+  macro_log_feature(X11_FOUND "X11" "X Window system" "http://www.x.org")
 endif ()
 
 
@@ -256,30 +189,29 @@ endif ()
 
 # Find OpenGL
 if(NOT ANDROID AND NOT EMSCRIPTEN)
-  set(OpenGL_GL_PREFERENCE LEGACY) # we want to use OPENGL_gl_LIBRARY for now
   find_package(OpenGL)
-  macro_log_feature(OPENGL_FOUND "OpenGL" "Support for the OpenGL and OpenGL 3+ render systems" "http://www.opengl.org/" FALSE "" "")
+  macro_log_feature(OPENGL_FOUND "OpenGL" "Support for the OpenGL and OpenGL 3+ render systems" "http://www.opengl.org/")
 endif()
 
 # Find OpenGL ES 2.x
 find_package(OpenGLES2)
-macro_log_feature(OPENGLES2_FOUND "OpenGL ES 2.x" "Support for the OpenGL ES 2.x render system" "http://www.khronos.org/opengles/" FALSE "" "")
+macro_log_feature(OPENGLES2_FOUND "OpenGL ES 2.x" "Support for the OpenGL ES 2.x render system" "http://www.khronos.org/opengles/")
 
 # Find DirectX
 if(WIN32)
 	find_package(DirectX)
-	macro_log_feature(DirectX9_FOUND "DirectX9" "Support for the DirectX render system" "http://msdn.microsoft.com/en-us/directx/" FALSE "" "")
+	macro_log_feature(DirectX9_FOUND "DirectX9" "Support for the DirectX render system" "http://msdn.microsoft.com/en-us/directx/")
 	
 	find_package(DirectX11)
-	macro_log_feature(DirectX11_FOUND "DirectX11" "Support for the DirectX11 render system" "http://msdn.microsoft.com/en-us/directx/" FALSE "" "")
+	macro_log_feature(DirectX11_FOUND "DirectX11" "Support for the DirectX11 render system" "http://msdn.microsoft.com/en-us/directx/")
 
 	if(OGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO)
 		# Find DirectX Stereo Driver Libraries
 		find_package(NVAPI)
-		macro_log_feature(NVAPI_FOUND "NVAPI" "Support NVIDIA stereo with the DirectX render system" "https://developer.nvidia.com/nvapi" FALSE "" "")
+		macro_log_feature(NVAPI_FOUND "NVAPI" "Support NVIDIA stereo with the DirectX render system" "https://developer.nvidia.com/nvapi")
 
 		find_package(AMDQBS)
-		macro_log_feature(AMDQBS_FOUND "AMDQBS" "Support AMD stereo with the DirectX render system" "http://developer.amd.com/tools-and-sdks/graphics-development/amd-quad-buffer-sdk/" FALSE "" "")
+		macro_log_feature(AMDQBS_FOUND "AMDQBS" "Support AMD stereo with the DirectX render system" "http://developer.amd.com/tools-and-sdks/graphics-development/amd-quad-buffer-sdk/")
 	endif()
 endif()
 
@@ -290,36 +222,43 @@ endif()
 # Find Cg
 if (NOT (APPLE_IOS OR WINDOWS_STORE OR WINDOWS_PHONE OR ANDROID OR EMSCRIPTEN))
   find_package(Cg)
-  macro_log_feature(Cg_FOUND "cg" "C for graphics shader language" "http://developer.nvidia.com/object/cg_toolkit.html" FALSE "" "")
+  macro_log_feature(Cg_FOUND "cg" "C for graphics shader language" "http://developer.nvidia.com/object/cg_toolkit.html")
 endif ()
 
+# Find Vulkan SDK
+macro_log_feature(ENV{VULKAN_SDK} "Vulkan SDK" "Vulkan RenderSystem, glslang Plugin. Alternatively use system packages" "https://vulkan.lunarg.com/")
+
 # OpenEXR
 find_package(OpenEXR)
-macro_log_feature(OPENEXR_FOUND "OpenEXR" "Load High dynamic range images" "http://www.openexr.com/" FALSE "" "")
+macro_log_feature(OPENEXR_FOUND "OpenEXR" "Load High dynamic range images" "http://www.openexr.com/")
 
 # Python
 set(Python_ADDITIONAL_VERSIONS 3.4) # allows using python3 on Ubuntu 14.04
 find_package(PythonInterp)
 find_package(PythonLibs)
-macro_log_feature(PYTHONLIBS_FOUND "Python" "Language bindings to use OGRE from Python" "http://www.python.org/" FALSE "" "")
+macro_log_feature(PYTHONLIBS_FOUND "Python" "Language bindings to use OGRE from Python" "http://www.python.org/")
 
 # SWIG
 find_package(SWIG 3.0.8 QUIET)
-macro_log_feature(SWIG_FOUND "SWIG" "Language bindings (Python, Java, C#) for OGRE" "http://www.swig.org/" FALSE "" "")
+macro_log_feature(SWIG_FOUND "SWIG" "Language bindings (Python, Java, C#) for OGRE" "http://www.swig.org/")
 
 # pugixml
 find_package(pugixml QUIET)
-macro_log_feature(pugixml_FOUND "pugixml" "Needed for XMLConverter and DotScene Plugin" "https://pugixml.org/" FALSE "" "")
+macro_log_feature(pugixml_FOUND "pugixml" "Needed for XMLConverter and DotScene Plugin" "https://pugixml.org/")
+
+# Find zlib
+find_package(ZLIB)
+macro_log_feature(ZLIB_FOUND "zlib" "Simple data compression library" "http://www.zlib.net")
 
 # Assimp
-find_package(ASSIMP QUIET)
-macro_log_feature(ASSIMP_FOUND "Assimp" "Needed for the AssimpLoader Plugin" "https://www.assimp.org/" FALSE "" "")
+find_package(assimp QUIET)
+macro_log_feature(assimp_FOUND "Assimp" "Needed for the AssimpLoader Plugin" "https://www.assimp.org/")
 
-if(ASSIMP_FOUND)
-  # workaround horribly broken assimp cmake
+if(assimp_FOUND)
+  # workaround horribly broken assimp cmake, fixed with assimp 5.1
   add_library(fix::assimp INTERFACE IMPORTED)
   set_target_properties(fix::assimp PROPERTIES
-      INTERFACE_LINK_LIBRARIES "${ASSIMP_LIBRARIES}"
+      INTERFACE_LINK_LIBRARIES "${ASSIMP_LIBRARIES};pugixml"
       INTERFACE_LINK_DIRECTORIES "${ASSIMP_LIBRARY_DIRS}"
   )
   if(EXISTS "${ASSIMP_INCLUDE_DIRS}")
@@ -335,7 +274,7 @@ endif()
 if(NOT ANDROID AND NOT EMSCRIPTEN)
   # find script does not work in cross compilation environment
   find_package(SDL2 QUIET)
-  macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/" FALSE "" "")
+  macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/")
   if(SDL2_FOUND AND NOT TARGET SDL2::SDL2)
     add_library(SDL2::SDL2 INTERFACE IMPORTED)
     set_target_properties(SDL2::SDL2 PROPERTIES
@@ -344,8 +283,10 @@ if(NOT ANDROID AND NOT EMSCRIPTEN)
     )
   endif()
 
-  find_package(Qt5 COMPONENTS Core Gui QUIET)
-  macro_log_feature(Qt5_FOUND "Qt" "optional integration with the Qt Library for window creation and input" "http://www.qt.io/" FALSE "" "")
+  find_package(QT NAMES Qt6 Qt5 COMPONENTS Core Gui QUIET)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui QUIET)
+
+  macro_log_feature(QT_FOUND "Qt" "optional integration with the Qt Library for window creation and input" "http://www.qt.io/")
 endif()
 
 #######################################################################
@@ -353,23 +294,8 @@ endif()
 #######################################################################
 
 find_package(Doxygen QUIET)
-macro_log_feature(DOXYGEN_FOUND "Doxygen" "Tool for building API documentation" "http://doxygen.org" FALSE "" "")
+macro_log_feature(DOXYGEN_FOUND "Doxygen" "Tool for building API documentation" "http://doxygen.org")
 
 # Find Softimage SDK
 find_package(Softimage)
-macro_log_feature(Softimage_FOUND "Softimage" "Softimage SDK needed for building XSIExporter" FALSE "6.0" "")
-
-#######################################################################
-# Tests
-#######################################################################
-
-# now see if we have a buildable Dependencies package in
-# the source tree. If so, include that, and it will take care of
-# setting everything up, including overriding any of the above
-# findings.
-set(OGREDEPS_RUNTIME_OUTPUT ${OGRE_RUNTIME_OUTPUT})
-if (EXISTS "${PROJECT_SOURCE_DIR}/Dependencies/CMakeLists.txt")
-  add_subdirectory(Dependencies)
-elseif (EXISTS "${PROJECT_SOURCE_DIR}/ogredeps/CMakeLists.txt")
-  add_subdirectory(ogredeps)
-endif ()
+macro_log_feature(Softimage_FOUND "Softimage" "Softimage SDK needed for building XSIExporter" "")
\ No newline at end of file
diff --git a/CMake/FeatureSummary.cmake b/CMake/FeatureSummary.cmake
deleted file mode 100644
index c730d5297..000000000
--- a/CMake/FeatureSummary.cmake
+++ /dev/null
@@ -1,247 +0,0 @@
-#-------------------------------------------------------------------
-# This file is part of the CMake build system for OGRE
-#     (Object-oriented Graphics Rendering Engine)
-# For the latest info, see http://www.ogre3d.org/
-#
-# The contents of this file are placed in the public domain. Feel
-# free to make use of it in any way you like.
-#-------------------------------------------------------------------
-
-# This file prints a summary of the selected build features.
-
-set(_features "\n")
-set(_features "${_features}----------------------------------------------------------------------------\n")
-set(_features "${_features}  FEATURE SUMMARY\n")
-set(_features "${_features}----------------------------------------------------------------------------\n\n")
-
-#summarise components
-if (OGRE_BUILD_COMPONENT_BITES)
-	set(_components "${_components}  + Bites\n")
-	if(Qt5_FOUND)
-	set(_components "${_components}  + Bites Qt Support\n")
-	endif()
-endif ()
-if (OGRE_BUILD_COMPONENT_HLMS)
-	set(_components "${_components}  + HLMS [DEPRECATED]\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_MESHLODGENERATOR)
-	set(_components "${_components}  + MeshLodGenerator\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_OVERLAY)
-	set(_components "${_components}  + Overlay\n")
-
-    if (OGRE_BUILD_COMPONENT_OVERLAY_IMGUI)
-        set(_components "${_components}  + Overlay Dear Imgui\n")
-    endif ()
-endif ()
-if (OGRE_BUILD_COMPONENT_PAGING)
-	set(_components "${_components}  + Paging\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_PROPERTY)
-	set(_components "${_components}  + Property\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_PYTHON)
-	set(_components "${_components}  + Python [BETA]\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_JAVA)
-	set(_components "${_components}  + Java/ JNI [BETA]\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_CSHARP)
-	set(_components "${_components}  + C#/ .NET [BETA]\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_RTSHADERSYSTEM)
-	set(_components "${_components}  + RTShader System\n")
-
-	if (OGRE_BUILD_RTSHADERSYSTEM_SHADERS)
-		set(_components "${_components}  + RTShader System Shaders\n")
-	endif ()
-endif ()
-if (OGRE_BUILD_COMPONENT_TERRAIN)
-	set(_components "${_components}  + Terrain\n")
-endif ()
-if (OGRE_BUILD_COMPONENT_VOLUME)
-	set(_components "${_components}  + Volume\n")
-endif ()
-
-if (DEFINED _components)
-	set(_features "${_features}Building components:\n${_components}")
-endif ()
-
-# summarise plugins
-if (OGRE_BUILD_PLUGIN_BSP)
-	set(_plugins "${_plugins}  + BSP scene manager\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_CG)
-	set(_plugins "${_plugins}  + Cg program manager\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_OCTREE)
-	set(_plugins "${_plugins}  + Octree scene manager\n")
-endif ()
-if(OGRE_BUILD_PLUGIN_EXRCODEC)
-	set(_plugins "${_plugins}  + OpenEXR image codec\n")
-endif()
-if (OGRE_BUILD_PLUGIN_STBI)
-	set(_plugins "${_plugins}  + STBI codec (generic)\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_FREEIMAGE)
-	set(_plugins "${_plugins}  + FreeImage codec (generic)\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_PCZ)
-	set(_plugins "${_plugins}  + Portal connected zone scene manager\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_PFX)
-	set(_plugins "${_plugins}  + Particle FX\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_DOT_SCENE)
-	set(_plugins "${_plugins}  + DotScene loader\n")
-endif ()
-if (OGRE_BUILD_PLUGIN_ASSIMP)
-	set(_plugins "${_plugins}  + Assimp loader (.obj, .ply, .fbx and more)\n")
-endif ()
-
-if (DEFINED _plugins)
-	set(_features "${_features}Building plugins:\n${_plugins}")
-endif ()
-
-# summarise rendersystems
-if (OGRE_BUILD_RENDERSYSTEM_D3D9)
-	set(_rendersystems "${_rendersystems}  + Direct3D 9\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_D3D11)
-	set(_rendersystems "${_rendersystems}  + Direct3D 11\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_GL)
-	set(_rendersystems "${_rendersystems}  + OpenGL\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_GL3PLUS)
-	set(_rendersystems "${_rendersystems}  + OpenGL 3+\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_GLES2)
-	set(_rendersystems "${_rendersystems}  + OpenGL ES2/ ES3\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER)
-	set(_rendersystems "${_rendersystems}  + OpenGL ES2 GLSL Optimiser\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT)
-	set(_rendersystems "${_rendersystems}  + OpenGL ES2 Cg Support\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT)
-	set(_rendersystems "${_rendersystems}  + OpenGL (all) StateCacheManager\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_METAL)
-	set(_rendersystems "${_rendersystems}  + Metal [EXPERIMENTAL]\n")
-endif ()
-if (OGRE_BUILD_RENDERSYSTEM_TINY)
-	set(_rendersystems "${_rendersystems}  + Tiny (Software) [EXPERIMENTAL]\n")
-endif ()
-
-if (DEFINED _rendersystems)
-	set(_features "${_features}Building rendersystems:\n${_rendersystems}")
-endif ()
-
-# summarise programs
-if (OGRE_BUILD_SAMPLES)
-	set(_programs "${_programs}  + Samples\n")
-endif ()
-if (OGRE_BUILD_TESTS)
-	set(_programs "${_programs}  + Tests\n")
-endif ()
-if (OGRE_BUILD_TOOLS)
-	set(_programs "${_programs}  + Tools\n")
-endif ()
-
-if (DEFINED _programs)
-	set(_features "${_features}Building executables:\n${_programs}")
-endif ()
-
-# summarise core features
-if (OGRE_CONFIG_ENABLE_MESHLOD)
-	set(_core "${_core}  + Mesh Lod\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_DDS)
-	set(_core "${_core}  + DDS image codec (.dds)\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_PVRTC)
-	set(_core "${_core}  + PVRTC image codec (.pvr)\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_ETC)
-	set(_core "${_core}  + ETC image codec (.pkm, .ktx) \n")
-endif ()
-if (OGRE_CONFIG_ENABLE_ASTC)
-	set(_core "${_core}  + ASTC image codec (.astc)\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_ZIP)
-	set(_core "${_core}  + ZIP archives\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE)
-	set(_core "${_core}  + Viewport orientation mode support\n")
-endif ()
-if (OGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO)
-	set(_core "${_core}  + Quad Buffer Stereo Technology (EXPERIMENTAL)\n")
-endif ()
-if (OGRE_RESOURCEMANAGER_STRICT EQUAL 1)
-	set(_core "${_core}  + Pedantic resource lookup\n")
-endif()
-if (OGRE_CONFIG_THREADS GREATER 0)
-	set(_core "${_core}  + Multi-threaded WorkQueue\n")
-endif()
-if (DEFINED _core)
-	set(_features "${_features}Building core features:\n${_core}")
-endif ()
-
-
-if (OGRE_NODELESS_POSITIONING)
-	set(_legacy "${_legacy}  + Nodeless positioning of Lights and Cameras\n")
-endif ()
-if (OGRE_RESOURCEMANAGER_STRICT EQUAL 0)
-	set(_legacy "${_legacy}  + Sloppy resource lookup\n")
-endif()
-if (OGRE_CONFIG_THREADS EQUAL 1 OR OGRE_CONFIG_THREADS EQUAL 2)
-	set(_legacy "${_legacy}  + Internal Resource locking\n")
-endif()
-if (DEFINED _legacy)
-	set(_features "${_features}Deprecated 1.7 API-level features:\n${_legacy}")
-endif ()
-
-set(_features "${_features}\n")
-
-
-# miscellaneous
-macro(var_to_string VAR STR)
-	if (${VAR})
-		set(${STR} "enabled")
-	else ()
-		set(${STR} "disabled")
-	endif ()
-endmacro ()
-
-# assert settings
-if (OGRE_ASSERT_MODE EQUAL 0)
-	set(_assert "standard")
-elseif (OGRE_ASSERT_MODE EQUAL 1)
-	set(_assert "release exceptions")
-else ()
-    set(_assert "exceptions")
-endif()
-# various true/false settings
-var_to_string(OGRE_CONFIG_DOUBLE _double)
-var_to_string(OGRE_CONFIG_NODE_INHERIT_TRANSFORM _inherit_transform)
-
-# build type
-if (OGRE_STATIC)
-	set(_buildtype "static")
-else ()
-	set(_buildtype "shared")
-endif ()
-
-set(_features "${_features}Build type:                      ${_buildtype}\n")
-set(_features "${_features}Use double precision:            ${_double}\n")
-set(_features "${_features}Nodes inherit transform:         ${_inherit_transform}\n")
-set(_features "${_features}Assert mode:                     ${_assert}\n")
-
-
-set(_features "${_features}\n----------------------------------------------------------------------------\n")
-
-# Display results, terminate if anything required is missing
-MACRO_DISPLAY_FEATURE_LOG()
-message(STATUS ${_features})
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dfada848c..d60803d3c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -507,4 +507,4 @@ include(Packaging)
 
 
 # Show feature summary
-include(FeatureSummary)
+include(OgreFeatureSummary)
diff --git a/Components/Bites/CMakeLists.txt b/Components/Bites/CMakeLists.txt
index 704140e5c..97b1b9623 100644
--- a/Components/Bites/CMakeLists.txt
+++ b/Components/Bites/CMakeLists.txt
@@ -22,7 +22,7 @@ endif()
 # Find X11
 if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)
   find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${OGRE_DEP_SEARCH_PATH} ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
-  macro_log_feature(XAW_LIBRARY "Xaw" "X11 Athena widget set for ConfigDialog" "http://www.x.org" FALSE "" "")
+  macro_log_feature(XAW_LIBRARY "Xaw" "X11 Athena widget set for ConfigDialog" "http://www.x.org")
   mark_as_advanced(XAW_LIBRARY)
 endif ()
 
@@ -37,6 +37,9 @@ if (OGRE_STATIC OR OGRE_BITES_STATIC_PLUGINS)
   if (OGRE_BUILD_PLUGIN_CG)
     set(DEPENDENCIES ${DEPENDENCIES} Plugin_CgProgramManager)
   endif ()
+  if (OGRE_BUILD_PLUGIN_GLSLANG)
+    set(DEPENDENCIES ${DEPENDENCIES} Plugin_GLSLangProgramManager)
+  endif ()
   if (OGRE_BUILD_PLUGIN_PFX)
     set(DEPENDENCIES ${DEPENDENCIES} Plugin_ParticleFX)
   endif ()
@@ -75,6 +78,9 @@ if (OGRE_STATIC OR OGRE_BITES_STATIC_PLUGINS)
   if (OGRE_BUILD_RENDERSYSTEM_TINY)
     set(DEPENDENCIES ${DEPENDENCIES} RenderSystem_Tiny)
   endif ()
+  if (OGRE_BUILD_RENDERSYSTEM_VULKAN)
+    set(DEPENDENCIES ${DEPENDENCIES} RenderSystem_Vulkan)
+  endif ()
 endif ()
 
 # define header and source files for the library
@@ -169,11 +175,16 @@ generate_export_header(OgreBites
     EXPORT_MACRO_NAME _OgreBitesExport
     EXPORT_FILE_NAME ${PROJECT_BINARY_DIR}/include/OgreBitesPrerequisites.h)
 
-if(Qt5_FOUND)
-  qt5_wrap_cpp(MOC_SRC "${CMAKE_CURRENT_SOURCE_DIR}/include/OgreApplicationContextQt.h")
+if(Qt6_FOUND OR Qt5_FOUND)
+  if(Qt6_FOUND)
+    qt6_wrap_cpp(MOC_SRC "${CMAKE_CURRENT_SOURCE_DIR}/include/OgreApplicationContextQt.h")
+  else()
+    qt5_wrap_cpp(MOC_SRC "${CMAKE_CURRENT_SOURCE_DIR}/include/OgreApplicationContextQt.h")
+  endif()
+
   add_library(OgreBitesQt ${OGRE_COMP_LIB_TYPE} ${MOC_SRC} "${CMAKE_CURRENT_SOURCE_DIR}/src/OgreApplicationContextQt.cpp")
   set_target_properties(OgreBitesQt PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-  target_link_libraries(OgreBitesQt PUBLIC Qt5::Gui OgreBites)
+  target_link_libraries(OgreBitesQt PUBLIC Qt${QT_VERSION_MAJOR}::Gui OgreBites)
   ogre_config_component(OgreBitesQt)
 endif()
 
@@ -186,4 +197,4 @@ install(FILES ${HEADER_FILES}
 )
 install(FILES "${PROJECT_SOURCE_DIR}/Media/packs/SdkTrays.zip"
   DESTINATION "${OGRE_MEDIA_PATH}/packs/"
-)
+)
\ No newline at end of file
diff --git a/OgreMain/include/OgreLodStrategy.h b/OgreMain/include/OgreLodStrategy.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/include/OgreGLCopyingRenderTexture.h b/RenderSystems/GL/include/OgreGLCopyingRenderTexture.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/include/OgreGLFBOMultiRenderTarget.h b/RenderSystems/GL/include/OgreGLFBOMultiRenderTarget.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/include/OgreGLFrameBufferObject.h b/RenderSystems/GL/include/OgreGLFrameBufferObject.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/include/OgreGLPBRenderTexture.h b/RenderSystems/GL/include/OgreGLPBRenderTexture.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/src/OgreGLCopyingRenderTexture.cpp b/RenderSystems/GL/src/OgreGLCopyingRenderTexture.cpp
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/src/OgreGLFBOMultiRenderTarget.cpp b/RenderSystems/GL/src/OgreGLFBOMultiRenderTarget.cpp
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/src/OgreGLFrameBufferObject.cpp b/RenderSystems/GL/src/OgreGLFrameBufferObject.cpp
old mode 100755
new mode 100644
diff --git a/RenderSystems/GL/src/OgreGLPBRenderTexture.cpp b/RenderSystems/GL/src/OgreGLPBRenderTexture.cpp
old mode 100755
new mode 100644
diff --git a/RenderSystems/GLES2/CMakeLists.txt b/RenderSystems/GLES2/CMakeLists.txt
index 96b0cf865..8eb64810b 100644
--- a/RenderSystems/GLES2/CMakeLists.txt
+++ b/RenderSystems/GLES2/CMakeLists.txt
@@ -10,12 +10,12 @@
 # Configure OpenGL ES 2.0 RenderSystem build
 
 # GLSL-Optimizer
-find_package(GLSLOptimizer)
-macro_log_feature(GLSL_Optimizer_FOUND "GLSL Optimizer" "GLSL Optimizer" "http://github.com/aras-p/glsl-optimizer/" FALSE "" "")
+find_package(GLSLOptimizer QUIET)
+macro_log_feature(GLSL_Optimizer_FOUND "GLSL Optimizer" "GLSL Optimizer" "http://github.com/aras-p/glsl-optimizer/")
 
 # HLSL2GLSL
-find_package(HLSL2GLSL)
-macro_log_feature(HLSL2GLSL_FOUND "HLSL2GLSL" "HLSL2GLSL" "http://hlsl2glslfork.googlecode.com/" FALSE "" "")
+find_package(HLSL2GLSL QUIET)
+macro_log_feature(HLSL2GLSL_FOUND "HLSL2GLSL" "HLSL2GLSL" "http://hlsl2glslfork.googlecode.com/")
 
 file(GLOB HEADER_FILES "include/*.h")
 list(APPEND HEADER_FILES
diff --git a/RenderSystems/GLSupport/include/EGL/X11/OgreX11EGLSupport.h b/RenderSystems/GLSupport/include/EGL/X11/OgreX11EGLSupport.h
index 5540b8d59..825335ee0 100644
--- a/RenderSystems/GLSupport/include/EGL/X11/OgreX11EGLSupport.h
+++ b/RenderSystems/GLSupport/include/EGL/X11/OgreX11EGLSupport.h
@@ -30,6 +30,8 @@ THE SOFTWARE.
 #ifndef __X11EGLSupport_H__
 #define __X11EGLSupport_H__
 
+// Tell EGL that we are using X11 (to select the appropriate definitions)
+#define USE_X11
 
 #include "OgreEGLSupport.h"
 
diff --git a/RenderSystems/GLSupport/include/OgreGLPBuffer.h b/RenderSystems/GLSupport/include/OgreGLPBuffer.h
old mode 100755
new mode 100644
diff --git a/RenderSystems/GLSupport/src/EGL/OgreEGLSupport.cpp b/RenderSystems/GLSupport/src/EGL/OgreEGLSupport.cpp
old mode 100755
new mode 100644
